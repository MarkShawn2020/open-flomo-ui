# .github/workflows/release.yml

name: Release macOS App

on:
  push:
    branches:
      - main # 触发工作流的分支

jobs:
  # Job 1: 确定版本号并更新 CHANGELOG
  determine-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 允许提交版本更新
      issues: write   # 允许创建 release notes
      pull-requests: write # 允许评论 PR
    outputs:
      new_release_published: ${{ steps.check_release.outputs.new_release_published }}
      new_release_version: ${{ steps.check_release.outputs.new_release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 需要 fetch-depth: 0 才能让 semantic-release 分析所有历史提交
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8 # 您可以指定 pnpm 版本, 推荐使用 8 或更高

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm' # <--- 关键：为 pnpm 设置缓存

      - name: Install dependencies
        run: pnpm install # <--- 关键：使用 pnpm 安装

      - name: Get current version
        id: before_release
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Run semantic-release
        id: semantic
        run: |
          npx semantic-release 2>&1 | tee semantic-release.log
          exit ${PIPESTATUS[0]}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if new release was published
        id: check_release
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "${{ steps.before_release.outputs.version }}" != "$CURRENT_VERSION" ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "✅ New version released: $CURRENT_VERSION"
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "❌ No new version released"
          fi

  # Job 2: 构建和发布 macOS 应用
  build-and-release-macos:
    # 依赖于上一个 Job，并检查其输出
    needs: determine-version
    if: needs.determine-version.outputs.new_release_published == 'true'

    runs-on: macos-latest
    permissions:
      contents: write # 允许 tauri-action 创建 release 和上传产物

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm' # <--- 关键：为 pnpm 设置缓存

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2

      - name: Install frontend dependencies
        run: pnpm install # <--- 关键：使用 pnpm 安装

      - name: Build and release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 使用上一个 Job 确定的版本号来创建 Git 标签和 Release
          tagName: v${{ needs.determine-version.outputs.new_release_version }}
          releaseName: 'Version ${{ needs.determine-version.outputs.new_release_version }}'
          # tauri-action 会自动从 CHANGELOG.md 中提取最新版本的日志
          # 因为此 Job 运行在 macos-latest 上，所以只会构建 macOS 的产物
